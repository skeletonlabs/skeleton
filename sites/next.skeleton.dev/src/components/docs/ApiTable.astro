---
import { type CollectionEntry, getEntry } from "astro:content";
import { Popover } from "@components/docs/Popover";

interface Props {
	schema?: CollectionEntry<"schemas">["data"];
}

const { schema } = Astro.props;
const { slug } = Astro.params;

async function getSchemaFromSlug(slug: string | undefined) {
	if (!slug) return null;
	const parts = slug.split("/");
	const component = parts.at(-2);
	const framework = parts.at(-1);
	if (!component || !framework) return null;
	return getEntry<"schemas", string>(
		"schemas",
		`${framework}/${component}`,
	)?.then((entry) => entry?.data);
}
---

<div class="space-y-8">
  {
    (schema ?? (await getSchemaFromSlug(slug)) ?? []).map((i) => {
      return (
        <section class="space-y-4">
          {/* Label */}
          <h3 class="h3">{i.name.replace("Props", "")}</h3>
          {/* Table */}
          <div class="table-wrap">
            <table class="table caption-bottom">
              <thead>
                <tr>
                  <th>Property</th>
                  <th>Type</th>
                  <th>Description</th>
                </tr>
              </thead>
              <tbody class="[&>tr]:hover:preset-tonal">
                {i.properties.map((property) => (
                  <tr class="align-top">
                    {/* Property */}
                    <td>
                      <div class="flex items-center gap-1">
                        <code class="code">{property.name}</code>
                        {property.required ? <span>*</span> : null}
                      </div>
                    </td>
                    {/* Type */}
                    <td>
                      {property.typeKind === "primitive" ? (
                        <span class="italic opacity-60">{property.type}</span>
                      ) : (
                        <Popover
                          trigger={`${property.typeKind} \u24D8`}
                          triggerBase="opacity-60 whitespace-nowrap mr-4"
                          arrowBase="fill-surface-950-50"
                          client:load
                        >
                          <div class="card bg-surface-950-50 text-surface-50-950 p-4 max-w-96 shadow-xl">
                            {property.type}
                          </div>
                        </Popover>
                      )}
                    </td>
                    {/* Description */}
                    <td>
                      <div class="grid grid-cols-1 gap-2">
                        <article>{property.documentation.text}</article>
                        {property.documentation.tags.some(
                          (tag) => tag.name === "default",
                        ) ? (
                          <small class="italic opacity-60">
                            Default:{" "}
                            {
                              property.documentation.tags.find(
                                (tag) => tag.name === "default",
                              )!.value
                            }
                          </small>
                        ) : null}
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </section>
      );
    })
  }
</div>
