---
import LayoutRoot from '@layouts/LayoutRoot.astro';

import Header from '@components/docs/Header.astro';
import Footer from '@components/docs/Footer.astro';
import ChipsBar from '@components/docs/ChipsBar.astro';
import Navigation from '@components/docs/Navigation.astro';
import Breadcrumbs from '@components/docs/Breadcrumbs.astro';
import FrameworkPicker from '@components/docs/FrameworkPicker.astro';
import TableOfContents from '@components/docs/TableOfContents.astro';

interface PageHeadings {
	depth: number;
	slug: string;
	text: string;
}

interface Chip {
	label: string;
	href: string;
	icon?: string;
	preset?: string;
}

interface Props {
	frontmatter: {
		// Required ---
		title: string;
		description: string;
		// Optional ---
		srcCore?: string;
		srcSvelte?: string;
		srcReact?: string;
		srcAlly?: string;
		srcZag?: string;
		showDocsUrl?: boolean;
		chips?: Chip[];
	};
	headings: PageHeadings[];
}

// Props
const { frontmatter, headings } = Astro.props satisfies Props;
// Layout Props
const layoutProps = {
	title: frontmatter.title,
	classList: 'grid grid-rows-[auto_1fr]'
};
// GitHub Settings
const branch = 'next';
// @ts-expect-error - FIXME: update before launch
const docSite = branch === 'master' ? 'skeleton.dev' : 'next.skeleton.dev';
// URLs
const urls = {
	githubDocsUrl: `https://github.com/skeletonlabs/skeleton/tree/${branch}/sites/${docSite}/src/content`,
	githubSkeletonUrl: `https://github.com/skeletonlabs/skeleton/tree/${branch}/packages/skeleton/src`,
	githubSvelteUrl: `https://github.com/skeletonlabs/skeleton/tree/${branch}/packages/skeleton-svelte`,
	githubReactUrl: `https://github.com/skeletonlabs/skeleton/tree/${branch}/packages/skeleton-react`
};
---

<LayoutRoot {...layoutProps}>
	<!-- Header -->
	<Header />
	<!-- Page -->
	<div class="container mx-auto grid grid-cols-1 xl:grid-cols-[240px_minmax(0px,_1fr)_280px] px-4 xl:px-10">
		<!-- Navigation -->
		<aside class="hidden xl:block self-start sticky top-[70px] h-[calc(100vh-70px)] py-4 xl:py-10 !pb-96 overflow-y-auto" data-navigation>
			<Navigation />
		</aside>
		<!-- Main -->
		<main class="px-4 xl:px-10 py-10 !pb-96 space-y-8 [&_.scroll-header]:scroll-mt-[calc(70px+40px)]">
			<!-- Header -->
			<header class="scroll-header space-y-4" data-pagefind-body id="_top">
				<!-- Breadcrumbs -->
				<Breadcrumbs />
				<h1 class="h1">{frontmatter.title ?? '(title)'}</h1>
				<p class="text-lg opacity-60">{frontmatter.description ?? '(description)'}</p>
			</header>
			<!-- Chips -->
			<ChipsBar {frontmatter} {urls} />
			<!-- Framework Tabs -->
			<FrameworkPicker />
			<!-- Content -->
			<article class="space-y-8" data-pagefind-body>
				<slot />
			</article>
			<!-- Footer -->
			<Footer classList="py-4 px-4 xl:px-0" />
		</main>
		<!-- Sidebar -->
		<aside class="hidden xl:block self-start sticky top-[70px] h-[calc(100vh-70px)] py-4 xl:py-10 space-y-8 overflow-y-auto">
			<!-- Carbon Ads -->
			<script
				is:inline
				async
				type="text/javascript"
				src="//cdn.carbonads.com/carbon.js?serve=CWYD627U&placement=carbonadsnet"
				id="_carbonads_js"></script>
			<!-- Table of Contents -->
			<TableOfContents {headings} />
			<!-- Promot -->
			<!-- <div class="card aspect-video flex justify-center items-center preset-tonal">(promo)</div> -->
		</aside>
	</div>
</LayoutRoot>

<script>
	(() => {
		const key = 'toc-position';
		let timeout = 0;
		let position = { scrollTop: 0 };
		const sidebar = document.querySelector('[data-navigation]');

		if (sidebar) {
			const data = sessionStorage.getItem(key);
			if (data) {
				try {
					const obj = JSON.parse(data);
					position = {
						...position,
						...obj
					};
					sidebar.scrollTop = position.scrollTop || 0;
				} catch (err) {
					// ...
				}
			}

			sidebar.addEventListener('scroll', () => {
				position.scrollTop = sidebar.scrollTop;
				if (!timeout) {
					timeout = window.setTimeout(() => {
						sessionStorage.setItem(key, JSON.stringify(position));
						timeout = 0;
					}, 100);
				}
			});
		}
	})();
</script>
