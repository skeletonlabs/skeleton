---
import '@styles/app.css';
import OpenGraphImage from '@images/meta/opengraph.png';
import { ClientRouter } from 'astro:transitions';

interface Props {
	title?: string;
	description?: string;
	classList?: string;
}

const { title, description, classList } = Astro.props;

// Format meta tag data
const meta = {
	title: `${title ? title + ' - ' : ''}Skeleton`,
	description: description ? description : 'Skeleton is an adaptive design system powered by Tailwind CSS.',
	image: OpenGraphImage.src,
};
---

<!doctype html>
<html lang="en" transition:animate="none">
	<head>
		<title>{meta.title}</title>
		<link rel="icon" type="image/png" href="/favicon.png" />
		<!-- Meta Tags -->
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<meta name="title" content={meta.title} />
		<meta name="description" content={meta.description} />
		<meta
			name="keywords"
			content="design system, tailwind, tailwind css, web, ui, components, svelte, sveltekit, react, next.js, vue, nuxt, solid, solidstart, astro, vite, reactive, accessibility, typescript, css, open source, adaptive"
		/>
		<meta name="theme-color" content="#111111" />
		<meta name="author" content="Skeleton Labs" />
		<!-- Open Graph - https://ogp.me/ -->
		<meta property="og:site_name" content="Skeleton" />
		<meta property="og:type" content="website" />
		<meta property="og:url" content={`https://www.skeleton.dev${Astro.url.pathname}`} />
		<meta property="og:locale" content="en_US" />
		<meta property="og:title" content={meta.title} />
		<meta property="og:description" content={meta.description} />
		<meta property="og:image" content={meta.image} />
		<meta property="og:image:secure_url" content={meta.image} />
		<meta property="og:image:type" content="image/jpg" />
		<meta property="og:image:width" content="800" />
		<meta property="og:image:height" content="400" />
		<!-- Open Graph: Twitter -->
		<meta name="twitter:card" content="summary" />
		<meta name="twitter:site" content="@SkeletonUI" />
		<meta name="twitter:creator" content="@SkeletonUI" />
		<meta name="twitter:title" content={meta.title} />
		<meta name="twitter:description" content={meta.description} />
		<meta name="twitter:image" content={meta.image} />
		<!-- Theme and Mode -->
		<script is:inline>
			function applyTheme(document) {
				const storedTheme = localStorage.getItem('theme');
				const defaultTheme = 'cerberus';
				const theme = storedTheme ?? defaultTheme;
				document.documentElement.setAttribute('data-theme', theme);
			}

			function applyMode(document) {
				const storedMode = localStorage.getItem('mode');
				const preferredMode = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
				const defaultMode = 'dark';
				const mode = storedMode ?? preferredMode ?? defaultMode;
				document.documentElement.setAttribute('data-mode', mode);
			}

			applyTheme(document);
			applyMode(document);

			document.addEventListener('astro:before-swap', (event) => {
				applyTheme(event.newDocument);
				applyMode(event.newDocument);
			});
		</script>
		<!-- Analytics -->
		<script
			type="text/partytown"
			defer
			data-domain="next.skeleton.dev"
			src="https://events.plygrnd.org/js/script.outbound-links.js"
			is:inline></script>
		<script>
			declare global {
				interface Window {
					plausible: any;
				}
			}
			window.plausible =
				window.plausible ||
				function () {
					(window.plausible.q = window.plausible.q || []).push(arguments);
				};
		</script>
		<!-- Astro -->
		<ClientRouter />
	</head>
	<body class:list={[classList]}>
		<slot />
	</body>
</html>
