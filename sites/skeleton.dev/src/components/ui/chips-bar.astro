---
import { CodeIcon, BlocksIcon, PersonStandingIcon } from '@lucide/svelte';
import { getActiveFramework } from '@/modules/framework';
import type { CollectionEntry } from 'astro:content';

interface Props {
	doc: CollectionEntry<'docs'>;
}

const { doc } = Astro.props;

const REPOSITORY_ROOT = new URL(`https://github.com/skeletonlabs/skeleton/tree/main/`);
const ZAG_ROOT = new URL('https://zagjs.com/');

const path = doc.id.split('/');
const section = path.at(0) ?? '';
const feature = path.at(1) ?? '';

const activeFramework = getActiveFramework(Astro);

function getSourcePath() {
	if (doc.data.references.source === false) {
		return;
	}
	if (doc.data.references.source) {
		return new URL(doc.data.references.source);
	}
	if (section === 'framework-components') {
		return new URL(`packages/skeleton-${activeFramework.id}/src/components/${feature}`, REPOSITORY_ROOT);
	}
	if (section === 'tailwind-components') {
		return new URL(`packages/skeleton/src/utilities/${feature}.css`, REPOSITORY_ROOT);
	}
}

function getStylesUrl() {
	if (doc.data.references.styles === false) {
		return;
	}
	if (doc.data.references.styles) {
		return new URL(doc.data.references.styles);
	}
	if (section === 'framework-components') {
		return new URL(`packages/skeleton-common/src/classes/${feature}.ts`, REPOSITORY_ROOT);
	}
}

function getA11yUrl() {
	if (doc.data.references.a11y === false) {
		return;
	}
	if (doc.data.references.a11y) {
		return new URL(doc.data.references.a11y);
	}
}

function getZagUrl() {
	if (doc.data.references.zag === false) {
		return;
	}
	if (doc.data.references.zag) {
		return new URL(doc.data.references.zag);
	}
	if (section === 'framework-components') {
		return new URL(`components/${activeFramework.id}/${feature}`, ZAG_ROOT);
	}
}

const references = [
	{ label: 'Source', url: getSourcePath(), icon: CodeIcon },
	{ label: 'Styles', url: getStylesUrl(), icon: CodeIcon },
	{ label: 'A11y', url: getA11yUrl(), icon: PersonStandingIcon },
	{ label: 'Zag', url: getZagUrl(), icon: BlocksIcon },
] as const;
---

<nav class="flex flex-wrap gap-2 overflow-x-auto pb-2">
	{
		references.map(
			(reference) =>
				reference.url && (
					<a class="chip preset-filled-surface-200-800" href={reference.url} target="_blank" rel="noopener noreferrer">
						<reference.icon class="size-4" />
						<span>{reference.label}</span>
					</a>
				),
		)
	}
</nav>
