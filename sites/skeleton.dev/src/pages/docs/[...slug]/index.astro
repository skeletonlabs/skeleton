---
import { components } from '@/components/mdx';
import LayoutDocs from '@/components/layouts/docs.astro';
import type { GetStaticPaths } from 'astro';
import { render, type InferEntrySchema } from 'astro:content';
import { getCollection, getEntry } from 'astro:content';

export const getStaticPaths = (async () => {
	const pages = await getCollection('docs', (page) => !page.id.endsWith('/meta'));
	return pages.map((page) => ({
		params: {
			slug: page.id,
		},
		props: {
			page: page,
		},
	}));
}) satisfies GetStaticPaths;

const { page } = Astro.props;
const { Content, remarkPluginFrontmatter, headings } = await render(page);

const meta = ['components/', 'integrations/'].some((id) => page.id.startsWith(id))
	? await getEntry('docs', page.id.replace(/\/[^/]*$/, '/meta'))
	: undefined;

if (meta) {
	Object.assign(remarkPluginFrontmatter, meta.data);
}
---

<LayoutDocs headings={headings} frontmatter={remarkPluginFrontmatter as InferEntrySchema<'docs'>}>
	<Content components={components} />
</LayoutDocs>
